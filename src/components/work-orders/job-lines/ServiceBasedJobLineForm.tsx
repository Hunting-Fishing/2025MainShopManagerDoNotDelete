
import React, { useState, useMemo } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { WorkOrderJobLine } from '@/types/jobLine';
import { ServicesSection } from '@/components/work-orders/fields/ServicesSection';
import { SelectedService } from '@/types/selectedService';
import { ServiceJob } from '@/types/service';
import { Search } from 'lucide-react';

interface ServiceBasedJobLineFormProps {
  workOrderId: string;
  onSubmit: (jobLines: WorkOrderJobLine[]) => void;
  onCancel: () => void;
}

export function ServiceBasedJobLineForm({
  workOrderId,
  onSubmit,
  onCancel
}: ServiceBasedJobLineFormProps) {
  const [selectedServices, setSelectedServices] = useState<SelectedService[]>([]);
  const [searchQuery, setSearchQuery] = useState('');

  const handleServiceSelect = (service: ServiceJob, categoryName: string, subcategoryName: string) => {
    const newService: SelectedService = {
      id: `${service.id}-${Date.now()}`,
      serviceId: service.id,
      name: service.name,
      description: service.description,
      category: categoryName,
      subcategory: subcategoryName,
      categoryName: categoryName,
      subcategoryName: subcategoryName,
      estimatedTime: service.estimatedTime,
      price: service.price,
      estimated_hours: service.estimatedTime ? service.estimatedTime / 60 : 0,
      labor_rate: service.price || 0,
      total_amount: service.price || 0,
      status: 'pending'
    };

    setSelectedServices(prev => [...prev, newService]);
  };

  const handleRemoveService = (serviceId: string) => {
    setSelectedServices(prev => prev.filter(s => s.id !== serviceId));
  };

  const handleUpdateServices = (services: SelectedService[]) => {
    setSelectedServices(services);
  };

  const handleSubmit = () => {
    const jobLines: WorkOrderJobLine[] = selectedServices.map((service, index) => ({
      id: '', // Will be generated by the database
      work_order_id: workOrderId,
      name: service.name,
      category: service.category,
      subcategory: service.subcategory,
      description: service.description,
      estimated_hours: service.estimated_hours,
      labor_rate: service.labor_rate,
      labor_rate_type: 'standard',
      total_amount: service.total_amount,
      status: 'pending',
      display_order: index + 1,
      notes: ''
    }));

    onSubmit(jobLines);
  };

  return (
    <div className="space-y-6">
      <div className="border-b pb-4">
        <h3 className="text-lg font-semibold">Add Services to Work Order</h3>
        <p className="text-sm text-muted-foreground">
          Choose from our service catalog to add job lines to this work order
        </p>
      </div>

      {/* Enhanced Search Input */}
      <div className="space-y-2">
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
          <Input
            placeholder="Search services... (e.g., brake, oil, tire, caliper)"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-10"
          />
        </div>
      </div>

      <div className="max-h-96 overflow-y-auto">
        <ServicesSection
          onServiceSelect={handleServiceSelect}
          selectedServices={selectedServices}
          onUpdateServices={handleUpdateServices}
          searchQuery={searchQuery}
        />
      </div>

      <div className="flex justify-end gap-3 pt-4 border-t">
        <Button 
          variant="outline" 
          onClick={onCancel}
        >
          Cancel
        </Button>
        <Button 
          onClick={handleSubmit}
          disabled={selectedServices.length === 0}
        >
          Add Selected Services ({selectedServices.length})
        </Button>
      </div>
    </div>
  );
}
